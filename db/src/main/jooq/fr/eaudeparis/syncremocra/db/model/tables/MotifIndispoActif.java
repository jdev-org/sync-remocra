/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables;

import fr.eaudeparis.syncremocra.db.model.Edp;
import fr.eaudeparis.syncremocra.db.model.tables.records.MotifIndispoActifRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MotifIndispoActif extends TableImpl<MotifIndispoActifRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>edp.motif_indispo_actif</code> */
  public static final MotifIndispoActif MOTIF_INDISPO_ACTIF = new MotifIndispoActif();

  /** The class holding records for this type */
  @Override
  public Class<MotifIndispoActifRecord> getRecordType() {
    return MotifIndispoActifRecord.class;
  }

  /** The column <code>edp.motif_indispo_actif.reference</code>. */
  public final TableField<MotifIndispoActifRecord, String> REFERENCE =
      createField(DSL.name("reference"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.motif_indispo_actif.motif</code>. */
  public final TableField<MotifIndispoActifRecord, String> MOTIF =
      createField(DSL.name("motif"), SQLDataType.VARCHAR, this, "");

  private MotifIndispoActif(Name alias, Table<MotifIndispoActifRecord> aliased) {
    this(alias, aliased, null);
  }

  private MotifIndispoActif(
      Name alias, Table<MotifIndispoActifRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>edp.motif_indispo_actif</code> table reference */
  public MotifIndispoActif(String alias) {
    this(DSL.name(alias), MOTIF_INDISPO_ACTIF);
  }

  /** Create an aliased <code>edp.motif_indispo_actif</code> table reference */
  public MotifIndispoActif(Name alias) {
    this(alias, MOTIF_INDISPO_ACTIF);
  }

  /** Create a <code>edp.motif_indispo_actif</code> table reference */
  public MotifIndispoActif() {
    this(DSL.name("motif_indispo_actif"), null);
  }

  public <O extends Record> MotifIndispoActif(
      Table<O> child, ForeignKey<O, MotifIndispoActifRecord> key) {
    super(child, key, MOTIF_INDISPO_ACTIF);
  }

  @Override
  public Schema getSchema() {
    return Edp.EDP;
  }

  @Override
  public MotifIndispoActif as(String alias) {
    return new MotifIndispoActif(DSL.name(alias), this);
  }

  @Override
  public MotifIndispoActif as(Name alias) {
    return new MotifIndispoActif(alias, this);
  }

  /** Rename this table */
  @Override
  public MotifIndispoActif rename(String name) {
    return new MotifIndispoActif(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public MotifIndispoActif rename(Name name) {
    return new MotifIndispoActif(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
