/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables.records;

import fr.eaudeparis.syncremocra.db.model.tables.Parametres;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ParametresRecord extends UpdatableRecordImpl<ParametresRecord>
    implements Record2<String, String> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>edp.parametres.code</code>. */
  public ParametresRecord setCode(String value) {
    set(0, value);
    return this;
  }

  /** Getter for <code>edp.parametres.code</code>. */
  public String getCode() {
    return (String) get(0);
  }

  /** Setter for <code>edp.parametres.valeur</code>. */
  public ParametresRecord setValeur(String value) {
    set(1, value);
    return this;
  }

  /** Getter for <code>edp.parametres.valeur</code>. */
  public String getValeur() {
    return (String) get(1);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record2 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }

  @Override
  public Row2<String, String> valuesRow() {
    return (Row2) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Parametres.PARAMETRES.CODE;
  }

  @Override
  public Field<String> field2() {
    return Parametres.PARAMETRES.VALEUR;
  }

  @Override
  public String component1() {
    return getCode();
  }

  @Override
  public String component2() {
    return getValeur();
  }

  @Override
  public String value1() {
    return getCode();
  }

  @Override
  public String value2() {
    return getValeur();
  }

  @Override
  public ParametresRecord value1(String value) {
    setCode(value);
    return this;
  }

  @Override
  public ParametresRecord value2(String value) {
    setValeur(value);
    return this;
  }

  @Override
  public ParametresRecord values(String value1, String value2) {
    value1(value1);
    value2(value2);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached ParametresRecord */
  public ParametresRecord() {
    super(Parametres.PARAMETRES);
  }

  /** Create a detached, initialised ParametresRecord */
  public ParametresRecord(String code, String valeur) {
    super(Parametres.PARAMETRES);

    setCode(code);
    setValeur(valeur);
  }
}
