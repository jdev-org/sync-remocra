/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables;

import fr.eaudeparis.syncremocra.db.model.Edp;
import fr.eaudeparis.syncremocra.db.model.Keys;
import fr.eaudeparis.syncremocra.db.model.tables.records.TypeErreurRecord;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * Typologie des erreurs pouvant être rencontrées lors du processus global de synchronisation entre
 * REMOCRA et EDP
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TypeErreur extends TableImpl<TypeErreurRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>edp.type_erreur</code> */
  public static final TypeErreur TYPE_ERREUR = new TypeErreur();

  /** The class holding records for this type */
  @Override
  public Class<TypeErreurRecord> getRecordType() {
    return TypeErreurRecord.class;
  }

  /** The column <code>edp.type_erreur.id</code>. Identifiant interne */
  public final TableField<TypeErreurRecord, Integer> ID =
      createField(
          DSL.name("id"),
          SQLDataType.INTEGER.nullable(false).identity(true),
          this,
          "Identifiant interne");

  /**
   * The column <code>edp.type_erreur.code</code>. Code du type d'erreur. Code identique à celui
   * retourné par l'API REMOCRA dans le cas d'une erreur lié à un appel API
   */
  public final TableField<TypeErreurRecord, String> CODE =
      createField(
          DSL.name("code"),
          SQLDataType.VARCHAR.nullable(false),
          this,
          "Code du type d'erreur. Code identique à celui retourné par l'API REMOCRA dans le cas"
              + " d'une erreur lié à un appel API");

  /**
   * The column <code>edp.type_erreur.iterations</code>. Nombre d'itérations autorisé pour ce type
   * d'erreur. Valable dans le cas des erreurs associés à des messages à traiter ou dans le cas des
   * erreurs système
   */
  public final TableField<TypeErreurRecord, Integer> ITERATIONS =
      createField(
          DSL.name("iterations"),
          SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)),
          this,
          "Nombre d'itérations autorisé pour ce type d'erreur. Valable dans le cas des erreurs"
              + " associés à des messages à traiter ou dans le cas des erreurs système");

  /**
   * The column <code>edp.type_erreur.contexte</code>. Contexte permettant d'adresser les erreurs
   * lors de la phase de notification
   */
  public final TableField<TypeErreurRecord, String> CONTEXTE =
      createField(
          DSL.name("contexte"),
          SQLDataType.VARCHAR.nullable(false),
          this,
          "Contexte permettant d'adresser les erreurs lors de la phase de notification");

  /**
   * The column <code>edp.type_erreur.message_action</code>. Message type permettant d'indiquer au
   * destinataire des erreurs le type d'action à engager
   */
  public final TableField<TypeErreurRecord, String> MESSAGE_ACTION =
      createField(
          DSL.name("message_action"),
          SQLDataType.VARCHAR,
          this,
          "Message type permettant d'indiquer au destinataire des erreurs le type d'action à"
              + " engager");

  /** The column <code>edp.type_erreur.message_erreur</code>. */
  public final TableField<TypeErreurRecord, String> MESSAGE_ERREUR =
      createField(DSL.name("message_erreur"), SQLDataType.VARCHAR, this, "");

  private TypeErreur(Name alias, Table<TypeErreurRecord> aliased) {
    this(alias, aliased, null);
  }

  private TypeErreur(Name alias, Table<TypeErreurRecord> aliased, Field<?>[] parameters) {
    super(
        alias,
        null,
        aliased,
        parameters,
        DSL.comment(
            "Typologie des erreurs pouvant être rencontrées lors du processus global de"
                + " synchronisation entre REMOCRA et EDP"),
        TableOptions.table());
  }

  /** Create an aliased <code>edp.type_erreur</code> table reference */
  public TypeErreur(String alias) {
    this(DSL.name(alias), TYPE_ERREUR);
  }

  /** Create an aliased <code>edp.type_erreur</code> table reference */
  public TypeErreur(Name alias) {
    this(alias, TYPE_ERREUR);
  }

  /** Create a <code>edp.type_erreur</code> table reference */
  public TypeErreur() {
    this(DSL.name("type_erreur"), null);
  }

  public <O extends Record> TypeErreur(Table<O> child, ForeignKey<O, TypeErreurRecord> key) {
    super(child, key, TYPE_ERREUR);
  }

  @Override
  public Schema getSchema() {
    return Edp.EDP;
  }

  @Override
  public Identity<TypeErreurRecord, Integer> getIdentity() {
    return (Identity<TypeErreurRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<TypeErreurRecord> getPrimaryKey() {
    return Keys.TYPE_ERREUR_PKEY;
  }

  @Override
  public List<UniqueKey<TypeErreurRecord>> getKeys() {
    return Arrays.<UniqueKey<TypeErreurRecord>>asList(
        Keys.TYPE_ERREUR_PKEY, Keys.TYPE_ERREUR_CODE_KEY);
  }

  @Override
  public TypeErreur as(String alias) {
    return new TypeErreur(DSL.name(alias), this);
  }

  @Override
  public TypeErreur as(Name alias) {
    return new TypeErreur(alias, this);
  }

  /** Rename this table */
  @Override
  public TypeErreur rename(String name) {
    return new TypeErreur(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public TypeErreur rename(Name name) {
    return new TypeErreur(name, null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Integer, String, Integer, String, String, String> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
