/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables;

import fr.eaudeparis.syncremocra.db.model.Edp;
import fr.eaudeparis.syncremocra.db.model.Keys;
import fr.eaudeparis.syncremocra.db.model.tables.records.PullHydrantAnomaliesRecord;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PullHydrantAnomalies extends TableImpl<PullHydrantAnomaliesRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>edp.pull_hydrant_anomalies</code> */
  public static final PullHydrantAnomalies PULL_HYDRANT_ANOMALIES = new PullHydrantAnomalies();

  /** The class holding records for this type */
  @Override
  public Class<PullHydrantAnomaliesRecord> getRecordType() {
    return PullHydrantAnomaliesRecord.class;
  }

  /** The column <code>edp.pull_hydrant_anomalies.id</code>. */
  public final TableField<PullHydrantAnomaliesRecord, Integer> ID =
      createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

  /** The column <code>edp.pull_hydrant_anomalies.visite</code>. */
  public final TableField<PullHydrantAnomaliesRecord, Long> VISITE =
      createField(DSL.name("visite"), SQLDataType.BIGINT, this, "");

  /** The column <code>edp.pull_hydrant_anomalies.code</code>. */
  public final TableField<PullHydrantAnomaliesRecord, String> CODE =
      createField(DSL.name("code"), SQLDataType.VARCHAR, this, "");

  private PullHydrantAnomalies(Name alias, Table<PullHydrantAnomaliesRecord> aliased) {
    this(alias, aliased, null);
  }

  private PullHydrantAnomalies(
      Name alias, Table<PullHydrantAnomaliesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>edp.pull_hydrant_anomalies</code> table reference */
  public PullHydrantAnomalies(String alias) {
    this(DSL.name(alias), PULL_HYDRANT_ANOMALIES);
  }

  /** Create an aliased <code>edp.pull_hydrant_anomalies</code> table reference */
  public PullHydrantAnomalies(Name alias) {
    this(alias, PULL_HYDRANT_ANOMALIES);
  }

  /** Create a <code>edp.pull_hydrant_anomalies</code> table reference */
  public PullHydrantAnomalies() {
    this(DSL.name("pull_hydrant_anomalies"), null);
  }

  public <O extends Record> PullHydrantAnomalies(
      Table<O> child, ForeignKey<O, PullHydrantAnomaliesRecord> key) {
    super(child, key, PULL_HYDRANT_ANOMALIES);
  }

  @Override
  public Schema getSchema() {
    return Edp.EDP;
  }

  @Override
  public Identity<PullHydrantAnomaliesRecord, Integer> getIdentity() {
    return (Identity<PullHydrantAnomaliesRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<PullHydrantAnomaliesRecord> getPrimaryKey() {
    return Keys.PULL_HYDRANT_ANOMALIES_PKEY;
  }

  @Override
  public List<UniqueKey<PullHydrantAnomaliesRecord>> getKeys() {
    return Arrays.<UniqueKey<PullHydrantAnomaliesRecord>>asList(Keys.PULL_HYDRANT_ANOMALIES_PKEY);
  }

  @Override
  public List<ForeignKey<PullHydrantAnomaliesRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<PullHydrantAnomaliesRecord, ?>>asList(
        Keys.PULL_HYDRANT_ANOMALIES__FK_VISITE);
  }

  private transient PullHydrantVisite _pullHydrantVisite;

  public PullHydrantVisite pullHydrantVisite() {
    if (_pullHydrantVisite == null)
      _pullHydrantVisite = new PullHydrantVisite(this, Keys.PULL_HYDRANT_ANOMALIES__FK_VISITE);

    return _pullHydrantVisite;
  }

  @Override
  public PullHydrantAnomalies as(String alias) {
    return new PullHydrantAnomalies(DSL.name(alias), this);
  }

  @Override
  public PullHydrantAnomalies as(Name alias) {
    return new PullHydrantAnomalies(alias, this);
  }

  /** Rename this table */
  @Override
  public PullHydrantAnomalies rename(String name) {
    return new PullHydrantAnomalies(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public PullHydrantAnomalies rename(Name name) {
    return new PullHydrantAnomalies(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<Integer, Long, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
