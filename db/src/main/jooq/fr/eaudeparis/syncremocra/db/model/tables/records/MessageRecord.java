/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables.records;


import fr.eaudeparis.syncremocra.db.model.tables.Message;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record12<Integer, Long, LocalDateTime, String, String, Boolean, Integer, String, String, LocalDateTime, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>edp.message.id</code>.
     */
    public MessageRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>edp.message.id_traca_pei</code>.
     */
    public MessageRecord setIdTracaPei(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.id_traca_pei</code>.
     */
    public Long getIdTracaPei() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>edp.message.date</code>.  Date et heure du changement tel que renseigné dans la vue READ_ONLY.VUE_PEI_EDP_REMOCRA
     */
    public MessageRecord setDate(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.date</code>.  Date et heure du changement tel que renseigné dans la vue READ_ONLY.VUE_PEI_EDP_REMOCRA
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>edp.message.type</code>. "CARACTERISTIQUES" pour les données techniques, localisation, canalisation, etc., "VISITES" pour les disponibilités et les anomalies associées
     */
    public MessageRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.type</code>. "CARACTERISTIQUES" pour les données techniques, localisation, canalisation, etc., "VISITES" pour les disponibilités et les anomalies associées
     */
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>edp.message.statut</code>.  A traiter : message à jouer ou à rejouer, Terminé : le message a été joué avec succès ou avec échec le type d'erreur empêche tout rejeu
     */
    public MessageRecord setStatut(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.statut</code>.  A traiter : message à jouer ou à rejouer, Terminé : le message a été joué avec succès ou avec échec le type d'erreur empêche tout rejeu
     */
    public String getStatut() {
        return (String) get(4);
    }

    /**
     * Setter for <code>edp.message.synchroniser</code>. Indique si le message est à rejouer ou non
     */
    public MessageRecord setSynchroniser(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.synchroniser</code>. Indique si le message est à rejouer ou non
     */
    public Boolean getSynchroniser() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>edp.message.synchronisations</code>. Nombre de fois où le message a été joué ou rejoué
     */
    public MessageRecord setSynchronisations(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.synchronisations</code>. Nombre de fois où le message a été joué ou rejoué
     */
    public Integer getSynchronisations() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>edp.message.erreur</code>. Message d'erreur éventuellement rencontré
     */
    public MessageRecord setErreur(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.erreur</code>. Message d'erreur éventuellement rencontré
     */
    public String getErreur() {
        return (String) get(7);
    }

    /**
     * Setter for <code>edp.message.json</code>.
     */
    public MessageRecord setJson(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.json</code>.
     */
    public String getJson() {
        return (String) get(8);
    }

    /**
     * Setter for <code>edp.message.date_debut_verif</code>.
     */
    public MessageRecord setDateDebutVerif(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.date_debut_verif</code>.
     */
    public LocalDateTime getDateDebutVerif() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>edp.message.json_creation_visite</code>.
     */
    public MessageRecord setJsonCreationVisite(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.json_creation_visite</code>.
     */
    public String getJsonCreationVisite() {
        return (String) get(10);
    }

    /**
     * Setter for <code>edp.message.declencheur</code>.
     */
    public MessageRecord setDeclencheur(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>edp.message.declencheur</code>.
     */
    public String getDeclencheur() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Long, LocalDateTime, String, String, Boolean, Integer, String, String, LocalDateTime, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Integer, Long, LocalDateTime, String, String, Boolean, Integer, String, String, LocalDateTime, String, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Message.MESSAGE.ID;
    }

    @Override
    public Field<Long> field2() {
        return Message.MESSAGE.ID_TRACA_PEI;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Message.MESSAGE.DATE;
    }

    @Override
    public Field<String> field4() {
        return Message.MESSAGE.TYPE;
    }

    @Override
    public Field<String> field5() {
        return Message.MESSAGE.STATUT;
    }

    @Override
    public Field<Boolean> field6() {
        return Message.MESSAGE.SYNCHRONISER;
    }

    @Override
    public Field<Integer> field7() {
        return Message.MESSAGE.SYNCHRONISATIONS;
    }

    @Override
    public Field<String> field8() {
        return Message.MESSAGE.ERREUR;
    }

    @Override
    public Field<String> field9() {
        return Message.MESSAGE.JSON;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return Message.MESSAGE.DATE_DEBUT_VERIF;
    }

    @Override
    public Field<String> field11() {
        return Message.MESSAGE.JSON_CREATION_VISITE;
    }

    @Override
    public Field<String> field12() {
        return Message.MESSAGE.DECLENCHEUR;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getIdTracaPei();
    }

    @Override
    public LocalDateTime component3() {
        return getDate();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String component5() {
        return getStatut();
    }

    @Override
    public Boolean component6() {
        return getSynchroniser();
    }

    @Override
    public Integer component7() {
        return getSynchronisations();
    }

    @Override
    public String component8() {
        return getErreur();
    }

    @Override
    public String component9() {
        return getJson();
    }

    @Override
    public LocalDateTime component10() {
        return getDateDebutVerif();
    }

    @Override
    public String component11() {
        return getJsonCreationVisite();
    }

    @Override
    public String component12() {
        return getDeclencheur();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getIdTracaPei();
    }

    @Override
    public LocalDateTime value3() {
        return getDate();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public String value5() {
        return getStatut();
    }

    @Override
    public Boolean value6() {
        return getSynchroniser();
    }

    @Override
    public Integer value7() {
        return getSynchronisations();
    }

    @Override
    public String value8() {
        return getErreur();
    }

    @Override
    public String value9() {
        return getJson();
    }

    @Override
    public LocalDateTime value10() {
        return getDateDebutVerif();
    }

    @Override
    public String value11() {
        return getJsonCreationVisite();
    }

    @Override
    public String value12() {
        return getDeclencheur();
    }

    @Override
    public MessageRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MessageRecord value2(Long value) {
        setIdTracaPei(value);
        return this;
    }

    @Override
    public MessageRecord value3(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public MessageRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public MessageRecord value5(String value) {
        setStatut(value);
        return this;
    }

    @Override
    public MessageRecord value6(Boolean value) {
        setSynchroniser(value);
        return this;
    }

    @Override
    public MessageRecord value7(Integer value) {
        setSynchronisations(value);
        return this;
    }

    @Override
    public MessageRecord value8(String value) {
        setErreur(value);
        return this;
    }

    @Override
    public MessageRecord value9(String value) {
        setJson(value);
        return this;
    }

    @Override
    public MessageRecord value10(LocalDateTime value) {
        setDateDebutVerif(value);
        return this;
    }

    @Override
    public MessageRecord value11(String value) {
        setJsonCreationVisite(value);
        return this;
    }

    @Override
    public MessageRecord value12(String value) {
        setDeclencheur(value);
        return this;
    }

    @Override
    public MessageRecord values(Integer value1, Long value2, LocalDateTime value3, String value4, String value5, Boolean value6, Integer value7, String value8, String value9, LocalDateTime value10, String value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(Integer id, Long idTracaPei, LocalDateTime date, String type, String statut, Boolean synchroniser, Integer synchronisations, String erreur, String json, LocalDateTime dateDebutVerif, String jsonCreationVisite, String declencheur) {
        super(Message.MESSAGE);

        setId(id);
        setIdTracaPei(idTracaPei);
        setDate(date);
        setType(type);
        setStatut(statut);
        setSynchroniser(synchroniser);
        setSynchronisations(synchronisations);
        setErreur(erreur);
        setJson(json);
        setDateDebutVerif(dateDebutVerif);
        setJsonCreationVisite(jsonCreationVisite);
        setDeclencheur(declencheur);
    }
}
