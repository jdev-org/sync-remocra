/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables;

import fr.eaudeparis.syncremocra.db.model.Edp;
import fr.eaudeparis.syncremocra.db.model.Keys;
import fr.eaudeparis.syncremocra.db.model.tables.records.PullHydrantRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PullHydrant extends TableImpl<PullHydrantRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>edp.pull_hydrant</code> */
  public static final PullHydrant PULL_HYDRANT = new PullHydrant();

  /** The class holding records for this type */
  @Override
  public Class<PullHydrantRecord> getRecordType() {
    return PullHydrantRecord.class;
  }

  /** The column <code>edp.pull_hydrant.id</code>. */
  public final TableField<PullHydrantRecord, Integer> ID =
      createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

  /** The column <code>edp.pull_hydrant.numero</code>. */
  public final TableField<PullHydrantRecord, String> NUMERO =
      createField(DSL.name("numero"), SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>edp.pull_hydrant.date_modification</code>. */
  public final TableField<PullHydrantRecord, LocalDateTime> DATE_MODIFICATION =
      createField(DSL.name("date_modification"), SQLDataType.LOCALDATETIME(6), this, "");

  /** The column <code>edp.pull_hydrant.auteur_modification</code>. */
  public final TableField<PullHydrantRecord, String> AUTEUR_MODIFICATION =
      createField(DSL.name("auteur_modification"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.diametre</code>. */
  public final TableField<PullHydrantRecord, String> DIAMETRE =
      createField(DSL.name("diametre"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.marque</code>. */
  public final TableField<PullHydrantRecord, String> MARQUE =
      createField(DSL.name("marque"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.modele</code>. */
  public final TableField<PullHydrantRecord, String> MODELE =
      createField(DSL.name("modele"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.diametre_canalisation</code>. */
  public final TableField<PullHydrantRecord, Integer> DIAMETRE_CANALISATION =
      createField(DSL.name("diametre_canalisation"), SQLDataType.INTEGER, this, "");

  /** The column <code>edp.pull_hydrant.annee_fabrication</code>. */
  public final TableField<PullHydrantRecord, String> ANNEE_FABRICATION =
      createField(DSL.name("annee_fabrication"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.dispo_terrestre</code>. */
  public final TableField<PullHydrantRecord, String> DISPO_TERRESTRE =
      createField(DSL.name("dispo_terrestre"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.dispo_hbe</code>. */
  public final TableField<PullHydrantRecord, String> DISPO_HBE =
      createField(DSL.name("dispo_hbe"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.numero_voie</code>. */
  public final TableField<PullHydrantRecord, Integer> NUMERO_VOIE =
      createField(DSL.name("numero_voie"), SQLDataType.INTEGER, this, "");

  /** The column <code>edp.pull_hydrant.suffixe_voie</code>. */
  public final TableField<PullHydrantRecord, String> SUFFIXE_VOIE =
      createField(DSL.name("suffixe_voie"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.niveau</code>. */
  public final TableField<PullHydrantRecord, String> NIVEAU =
      createField(DSL.name("niveau"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.voie</code>. */
  public final TableField<PullHydrantRecord, String> VOIE =
      createField(DSL.name("voie"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.voie2</code>. */
  public final TableField<PullHydrantRecord, String> VOIE2 =
      createField(DSL.name("voie2"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.complement</code>. */
  public final TableField<PullHydrantRecord, String> COMPLEMENT =
      createField(DSL.name("complement"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.en_face</code>. */
  public final TableField<PullHydrantRecord, Boolean> EN_FACE =
      createField(DSL.name("en_face"), SQLDataType.BOOLEAN, this, "");

  /** The column <code>edp.pull_hydrant.commune</code>. */
  public final TableField<PullHydrantRecord, String> COMMUNE =
      createField(DSL.name("commune"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.domaine</code>. */
  public final TableField<PullHydrantRecord, String> DOMAINE =
      createField(DSL.name("domaine"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.nature</code>. */
  public final TableField<PullHydrantRecord, String> NATURE =
      createField(DSL.name("nature"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.nature_deci</code>. */
  public final TableField<PullHydrantRecord, String> NATURE_DECI =
      createField(DSL.name("nature_deci"), SQLDataType.VARCHAR, this, "");

  /** The column <code>edp.pull_hydrant.indispo_temporaire</code>. */
  public final TableField<PullHydrantRecord, Boolean> INDISPO_TEMPORAIRE =
      createField(DSL.name("indispo_temporaire"), SQLDataType.BOOLEAN, this, "");

  private PullHydrant(Name alias, Table<PullHydrantRecord> aliased) {
    this(alias, aliased, null);
  }

  private PullHydrant(Name alias, Table<PullHydrantRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>edp.pull_hydrant</code> table reference */
  public PullHydrant(String alias) {
    this(DSL.name(alias), PULL_HYDRANT);
  }

  /** Create an aliased <code>edp.pull_hydrant</code> table reference */
  public PullHydrant(Name alias) {
    this(alias, PULL_HYDRANT);
  }

  /** Create a <code>edp.pull_hydrant</code> table reference */
  public PullHydrant() {
    this(DSL.name("pull_hydrant"), null);
  }

  public <O extends Record> PullHydrant(Table<O> child, ForeignKey<O, PullHydrantRecord> key) {
    super(child, key, PULL_HYDRANT);
  }

  @Override
  public Schema getSchema() {
    return Edp.EDP;
  }

  @Override
  public Identity<PullHydrantRecord, Integer> getIdentity() {
    return (Identity<PullHydrantRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<PullHydrantRecord> getPrimaryKey() {
    return Keys.PULL_HYDRANT_PKEY;
  }

  @Override
  public List<UniqueKey<PullHydrantRecord>> getKeys() {
    return Arrays.<UniqueKey<PullHydrantRecord>>asList(Keys.PULL_HYDRANT_PKEY);
  }

  @Override
  public PullHydrant as(String alias) {
    return new PullHydrant(DSL.name(alias), this);
  }

  @Override
  public PullHydrant as(Name alias) {
    return new PullHydrant(alias, this);
  }

  /** Rename this table */
  @Override
  public PullHydrant rename(String name) {
    return new PullHydrant(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public PullHydrant rename(Name name) {
    return new PullHydrant(name, null);
  }
}
