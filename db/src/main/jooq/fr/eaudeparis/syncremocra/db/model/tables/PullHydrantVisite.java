/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables;


import fr.eaudeparis.syncremocra.db.model.Edp;
import fr.eaudeparis.syncremocra.db.model.Keys;
import fr.eaudeparis.syncremocra.db.model.tables.records.PullHydrantVisiteRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PullHydrantVisite extends TableImpl<PullHydrantVisiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>edp.pull_hydrant_visite</code>
     */
    public static final PullHydrantVisite PULL_HYDRANT_VISITE = new PullHydrantVisite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PullHydrantVisiteRecord> getRecordType() {
        return PullHydrantVisiteRecord.class;
    }

    /**
     * The column <code>edp.pull_hydrant_visite.id</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.hydrant</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Long> HYDRANT = createField(DSL.name("hydrant"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.date</code>.
     */
    public final TableField<PullHydrantVisiteRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.type</code>.
     */
    public final TableField<PullHydrantVisiteRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.ctrl_debit_pression</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Boolean> CTRL_DEBIT_PRESSION = createField(DSL.name("ctrl_debit_pression"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.agent1</code>.
     */
    public final TableField<PullHydrantVisiteRecord, String> AGENT1 = createField(DSL.name("agent1"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.agent2</code>.
     */
    public final TableField<PullHydrantVisiteRecord, String> AGENT2 = createField(DSL.name("agent2"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.debit</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Integer> DEBIT = createField(DSL.name("debit"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.debit_max</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Integer> DEBIT_MAX = createField(DSL.name("debit_max"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.pression</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Double> PRESSION = createField(DSL.name("pression"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.pression_dyn</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Double> PRESSION_DYN = createField(DSL.name("pression_dyn"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.pression_dyn_deb</code>.
     */
    public final TableField<PullHydrantVisiteRecord, Double> PRESSION_DYN_DEB = createField(DSL.name("pression_dyn_deb"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>edp.pull_hydrant_visite.observations</code>.
     */
    public final TableField<PullHydrantVisiteRecord, String> OBSERVATIONS = createField(DSL.name("observations"), SQLDataType.VARCHAR, this, "");

    private PullHydrantVisite(Name alias, Table<PullHydrantVisiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private PullHydrantVisite(Name alias, Table<PullHydrantVisiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>edp.pull_hydrant_visite</code> table reference
     */
    public PullHydrantVisite(String alias) {
        this(DSL.name(alias), PULL_HYDRANT_VISITE);
    }

    /**
     * Create an aliased <code>edp.pull_hydrant_visite</code> table reference
     */
    public PullHydrantVisite(Name alias) {
        this(alias, PULL_HYDRANT_VISITE);
    }

    /**
     * Create a <code>edp.pull_hydrant_visite</code> table reference
     */
    public PullHydrantVisite() {
        this(DSL.name("pull_hydrant_visite"), null);
    }

    public <O extends Record> PullHydrantVisite(Table<O> child, ForeignKey<O, PullHydrantVisiteRecord> key) {
        super(child, key, PULL_HYDRANT_VISITE);
    }

    @Override
    public Schema getSchema() {
        return Edp.EDP;
    }

    @Override
    public Identity<PullHydrantVisiteRecord, Integer> getIdentity() {
        return (Identity<PullHydrantVisiteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PullHydrantVisiteRecord> getPrimaryKey() {
        return Keys.PULL_HYDRANT_VISITE_PKEY;
    }

    @Override
    public List<UniqueKey<PullHydrantVisiteRecord>> getKeys() {
        return Arrays.<UniqueKey<PullHydrantVisiteRecord>>asList(Keys.PULL_HYDRANT_VISITE_PKEY);
    }

    @Override
    public List<ForeignKey<PullHydrantVisiteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PullHydrantVisiteRecord, ?>>asList(Keys.PULL_HYDRANT_VISITE__FK_HYDRANT);
    }

    private transient PullHydrant _pullHydrant;

    public PullHydrant pullHydrant() {
        if (_pullHydrant == null)
            _pullHydrant = new PullHydrant(this, Keys.PULL_HYDRANT_VISITE__FK_HYDRANT);

        return _pullHydrant;
    }

    @Override
    public PullHydrantVisite as(String alias) {
        return new PullHydrantVisite(DSL.name(alias), this);
    }

    @Override
    public PullHydrantVisite as(Name alias) {
        return new PullHydrantVisite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PullHydrantVisite rename(String name) {
        return new PullHydrantVisite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PullHydrantVisite rename(Name name) {
        return new PullHydrantVisite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Long, LocalDateTime, String, Boolean, String, String, Integer, Integer, Double, Double, Double, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
