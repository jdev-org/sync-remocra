/*
 * This file is generated by jOOQ.
 */
package fr.eaudeparis.syncremocra.db.model.tables;

import fr.eaudeparis.syncremocra.db.model.Edp;
import fr.eaudeparis.syncremocra.db.model.Keys;
import fr.eaudeparis.syncremocra.db.model.tables.records.ReferentielAnomaliesRecord;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ReferentielAnomalies extends TableImpl<ReferentielAnomaliesRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>edp.referentiel_anomalies</code> */
  public static final ReferentielAnomalies REFERENTIEL_ANOMALIES = new ReferentielAnomalies();

  /** The class holding records for this type */
  @Override
  public Class<ReferentielAnomaliesRecord> getRecordType() {
    return ReferentielAnomaliesRecord.class;
  }

  /** The column <code>edp.referentiel_anomalies.code_bspp</code>. */
  public final TableField<ReferentielAnomaliesRecord, String> CODE_BSPP =
      createField(DSL.name("code_bspp"), SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>edp.referentiel_anomalies.code_edp</code>. */
  public final TableField<ReferentielAnomaliesRecord, String> CODE_EDP =
      createField(DSL.name("code_edp"), SQLDataType.VARCHAR.nullable(false), this, "");

  private ReferentielAnomalies(Name alias, Table<ReferentielAnomaliesRecord> aliased) {
    this(alias, aliased, null);
  }

  private ReferentielAnomalies(
      Name alias, Table<ReferentielAnomaliesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>edp.referentiel_anomalies</code> table reference */
  public ReferentielAnomalies(String alias) {
    this(DSL.name(alias), REFERENTIEL_ANOMALIES);
  }

  /** Create an aliased <code>edp.referentiel_anomalies</code> table reference */
  public ReferentielAnomalies(Name alias) {
    this(alias, REFERENTIEL_ANOMALIES);
  }

  /** Create a <code>edp.referentiel_anomalies</code> table reference */
  public ReferentielAnomalies() {
    this(DSL.name("referentiel_anomalies"), null);
  }

  public <O extends Record> ReferentielAnomalies(
      Table<O> child, ForeignKey<O, ReferentielAnomaliesRecord> key) {
    super(child, key, REFERENTIEL_ANOMALIES);
  }

  @Override
  public Schema getSchema() {
    return Edp.EDP;
  }

  @Override
  public UniqueKey<ReferentielAnomaliesRecord> getPrimaryKey() {
    return Keys.REFERENTIEL_ANOMALIES_PKEY;
  }

  @Override
  public List<UniqueKey<ReferentielAnomaliesRecord>> getKeys() {
    return Arrays.<UniqueKey<ReferentielAnomaliesRecord>>asList(Keys.REFERENTIEL_ANOMALIES_PKEY);
  }

  @Override
  public ReferentielAnomalies as(String alias) {
    return new ReferentielAnomalies(DSL.name(alias), this);
  }

  @Override
  public ReferentielAnomalies as(Name alias) {
    return new ReferentielAnomalies(alias, this);
  }

  /** Rename this table */
  @Override
  public ReferentielAnomalies rename(String name) {
    return new ReferentielAnomalies(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public ReferentielAnomalies rename(Name name) {
    return new ReferentielAnomalies(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
